/**
 * @file GazeControllerService.idl
 * @brief Services for the gaze controller interface
 */
module OpenHRP
{

  interface GazeControllerService
  {
    typedef sequence<double, 3> DblSequence3;

    /**
     * @enum ControllerMode
     * @brief Mode of controller
     */
    enum ControllerMode {
      MODE_IDLE,
      MODE_TRANSITION,
      MODE_GAZE,
      MODE_TRACKING,
      MODE_STABILIZE
    };

    /**
     * @enum CoordsBase
     * @brief coorinates base
     */
    enum BaseType {
      MODE_BODY_LOCAL,
      MODE_WORLD,
      MODE_LINK_LOCAL,
      MODE_CAMERA_LOCAL
    };

    /**
     * @struct gazeParam
     * @brief Gaze controller parameters for one end-effector.
     */
    struct gazeParam {
      ///
      DblSequence3 target;
      /// Controller mode.
      ControllerMode controller_mode;
      /// Coordinate Base
      BaseType base_frame;
      ///
      string linkname;
      /// Use StateHolder basePos and baseRpy?
      boolean use_sh_base_pos_rpy;
    };

    /**
     * @brief start gaze controller with waiting for transition.
     * @param name gaze controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean startGazeController();

    /**
     * @brief start gaze controller without waiting for transition.
     * @param name gaze controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean startGazeControllerNoWait();

    /**
     * @brief stop gaze controller with waiting for transition.
     * @param name gaze controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean stopGazeController();

    /**
     * @brief stop gaze controller without waiting for transition.
     * @param name gaze controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean stopGazeControllerNoWait();

    /**
     * @brief set gaze parameters.
     * @param i_param input new gaze parameters
     * @param name gaze controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean setGazeControllerParam(in gazeParam i_param);

    /**
     * @brief get gaze parameters.
     * @param i_param ouput gaze parameters
     * @param name gaze controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean getGazeControllerParam(out gazeParam i_param);

    /**
     * @brief wait for gaze controller mode transition.
     * @param name gaze controller param's name, which basically corresponds to force sensor name
     */
    void waitGazeControllerTransition();
  };
};
